import asyncio
import logging
from aiogram import types

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import Message
import os
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.types import BotCommand
from dotenv import load_dotenv
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cur = conn.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS weekly_hours (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    year INTEGER,
    week INTEGER,
    hours REAL,
    UNIQUE(user_id, year, week),
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS monthly_hours (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    year INTEGER,
    month INTEGER,
    hours REAL,
    UNIQUE(user_id, year, month),
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)''')
conn.commit()

class Register(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()

class InputHours(StatesGroup):
    waiting_for_week_hours = State()
    waiting_for_month_hours = State()
    waiting_for_week_hours_edit = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cur = conn.cursor()
    cur.execute("SELECT first_name, last_name FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if user:
        first_name, last_name = user
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å ‚Äì –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(Register.waiting_for_name)

@dp.message(Command("notify"))
async def manual_notify(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await send_weekly_prompt()
    await send_monthly_prompt()
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@dp.message(Command("week"))
async def manual_week_hours(message: Message, state: FSMContext):
    user_id = message.from_user.id
    now = datetime.now()
    year, week_num, _ = now.isocalendar()

    cur = conn.cursor()
    cur.execute("""
        SELECT hours FROM weekly_hours 
        WHERE user_id = ? AND year = ? AND week = ?
    """, (user_id, year, week_num))
    existing_data = cur.fetchone()

    if existing_data:
        await message.answer(
            f"‚õî –í—ã —É–∂–µ –≤–≤–µ–ª–∏ {existing_data[0]} —á–∞—Å–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ({week_num}-—è –Ω–µ–¥–µ–ª—è {year} –≥–æ–¥–∞).")
        return

    parts = message.text.split(maxsplit=1)

    if len(parts) == 2 and parts[1].isdigit():
        hours = float(parts[1])
        cur.execute("""
            INSERT INTO weekly_hours (user_id, year, week, hours) 
            VALUES (?, ?, ?, ?)
        """, (user_id, year, week_num, hours))
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {hours} —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ({week_num}-—è –Ω–µ–¥–µ–ª—è {year} –≥–æ–¥–∞).")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:")
    await state.set_state(InputHours.waiting_for_week_hours)
    await state.update_data(target_year=year, target_week=week_num)


@dp.message(Command("month"))
async def manual_month_hours(message: Message, state: FSMContext):
    user_id = message.from_user.id
    now = datetime.now()
    year, month = now.year, now.month

    cur = conn.cursor()
    cur.execute("""
        SELECT hours FROM monthly_hours 
        WHERE user_id = ? AND year = ? AND month = ?
    """, (user_id, year, month))
    existing_data = cur.fetchone()

    if existing_data:
        await message.answer(f"‚õî –í—ã —É–∂–µ –≤–≤–µ–ª–∏ {existing_data[0]} —á–∞—Å–æ–≤ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü ({month:02d}.{year}).")
        return

    parts = message.text.split(maxsplit=1)

    if len(parts) == 2 and parts[1].isdigit():
        hours = float(parts[1])
        cur.execute("""
            INSERT INTO monthly_hours (user_id, year, month, hours) 
            VALUES (?, ?, ?, ?)
        """, (user_id, year, month, hours))
        conn.commit()
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {hours} —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({month:02d}.{year}).")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:")
    await state.set_state(InputHours.waiting_for_month_hours)
    await state.update_data(target_year=year, target_month=month)

@dp.message(Register.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Register.waiting_for_surname)

@dp.message(Register.waiting_for_surname)
async def process_surname(message: types.Message, state: FSMContext):
    data = await state.get_data()
    first_name = data.get("first_name", "").strip()
    last_name = message.text.strip()
    user_id = message.from_user.id
    cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO users (user_id, first_name, last_name) VALUES (?, ?, ?)",
                (user_id, first_name, last_name))
    conn.commit()
    await state.clear()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {first_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. "
                         f"–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –≤–≤–æ–¥–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü."
                         f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤–≤–µ–¥–∏ /help")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ *–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö.*\n\n"
        "üìå /start ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "üìå /help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "üìå /week ‚Äì –≤–≤–µ—Å—Ç–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω—ã)\n"
        "üìå /weekchange ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n"
        "üìå /month ‚Äì –≤–≤–µ—Å—Ç–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—ã –Ω–∞ –º–µ—Å—è—Ü (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω—ã)\n"
    )

    if message.from_user.id in ADMIN_IDS:
        help_text += (
            "\n*üîß –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:*\n"
            "üìä /users ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üìä /export ‚Äì —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel\n"
            "üîß /editname <user_id> <–Ω–æ–≤–æ–µ_–∏–º—è> ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üîß /editusername <user_id> <–Ω–æ–≤–∞—è_—Ñ–∞–º–∏–ª–∏—è> ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üîß /remove_user <user_id> ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üì¢ /notify ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –≤–≤–æ–¥–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤\n"
        )

    await message.answer(help_text, parse_mode="Markdown")




#–ê–î–ú–ò–ù–ö–ê
@dp.message(Command("users"))
async def cmd_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    cur = conn.cursor()
    cur.execute("SELECT user_id, first_name, last_name FROM users")
    users_list = cur.fetchall()
    if not users_list:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    text_lines = ["üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*"]
    for user_id, first_name, last_name in users_list:
        cur.execute("SELECT year, month, hours FROM monthly_hours WHERE user_id=? ORDER BY year DESC, month DESC LIMIT 1", (user_id,))
        mon_data = cur.fetchone()
        if mon_data:
            mon_year, mon_month, mon_hours = mon_data
            mon_info = f"{mon_hours} —á. (–ø–ª–∞–Ω {mon_month:02d}.{mon_year})"
        else:
            mon_info = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        cur.execute("SELECT year, week, hours FROM weekly_hours WHERE user_id=? ORDER BY year DESC, week DESC LIMIT 1", (user_id,))
        week_data = cur.fetchone()
        if week_data:
            week_year, week_num, week_hours = week_data
            week_info = f"{week_hours} —á. (–Ω–µ–¥. {week_num} {week_year}–≥.)"
        else:
            week_info = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        text_lines.append(f"{user_id}: *{first_name} {last_name}* ‚Äî –ú–µ—Å—è—Ü: {mon_info}, –ù–µ–¥–µ–ª—è: {week_info}")
    await message.answer("\n".join(text_lines), parse_mode="Markdown")

@dp.message(Command("export"))
async def cmd_export(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    df_users = pd.read_sql_query("SELECT * FROM users", conn)
    df_weekly = pd.read_sql_query("SELECT * FROM weekly_hours", conn)
    df_monthly = pd.read_sql_query("SELECT * FROM monthly_hours", conn)

    excel_file = "work_hours.xlsx"

    with pd.ExcelWriter(excel_file, engine="openpyxl") as writer:
        sheet_count = 0

        if not df_weekly.empty:
            df_weekly = df_weekly.merge(df_users, on='user_id', how='left')
            df_weekly = df_weekly[['first_name', 'last_name', 'year', 'week', 'hours']]
            df_weekly.rename(columns={
                'first_name': 'First Name', 'last_name': 'Last Name',
                'year': 'Year', 'week': 'Week', 'hours': 'Hours'
            }, inplace=True)
            df_weekly.to_excel(writer, sheet_name="WeeklyHours", index=False)
            sheet_count += 1

        if not df_monthly.empty:
            df_monthly = df_monthly.merge(df_users, on='user_id', how='left')
            df_monthly = df_monthly[['first_name', 'last_name', 'year', 'month', 'hours']]
            df_monthly.rename(columns={
                'first_name': 'First Name', 'last_name': 'Last Name',
                'year': 'Year', 'month': 'Month', 'hours': 'Hours'
            }, inplace=True)
            df_monthly.to_excel(writer, sheet_name="MonthlyHours", index=False)
            sheet_count += 1
        if sheet_count == 0:
            df_empty = pd.DataFrame({"–°–æ–æ–±—â–µ–Ω–∏–µ": ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"]})
            df_empty.to_excel(writer, sheet_name="Empty", index=False)

    try:
        file = FSInputFile(excel_file)
        await message.answer_document(file, caption="üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º")
    finally:
        os.remove(excel_file) #


@dp.message(Command("editusername"))
async def cmd_edit_surname(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/editusername <user_id> <–Ω–æ–≤–∞—è_—Ñ–∞–º–∏–ª–∏—è>`", parse_mode="Markdown")
        return

    user_id_str, new_surname = parts[1], parts[2]

    if not user_id_str.isdigit():
        await message.answer("‚ùó –û—à–∏–±–∫–∞: `user_id` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
        return

    user_id = int(user_id_str)

    cur = conn.cursor()
    cur.execute("UPDATE users SET last_name=? WHERE user_id=?", (new_surname.strip(), user_id))

    if cur.rowcount == 0:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
    else:
        conn.commit()
        await message.answer(f"‚úÖ –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{new_surname}`.", parse_mode="Markdown")


@dp.message(Command("editname"))
async def cmd_edit_name(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/editname <user_id> <–Ω–æ–≤–æ–µ_–∏–º—è>`", parse_mode="Markdown")
        return

    user_id_str, new_name = parts[1], parts[2]

    if not user_id_str.isdigit():
        await message.answer("‚ùó –û—à–∏–±–∫–∞: `user_id` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
        return

    user_id = int(user_id_str)

    cur = conn.cursor()
    cur.execute("UPDATE users SET first_name=? WHERE user_id=?", (new_name.strip(), user_id))

    if cur.rowcount == 0:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
    else:
        conn.commit()
        await message.answer(f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ `{new_name}`.", parse_mode="Markdown")


@dp.message(Command("removeuser"))
async def cmd_remove_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove_user <user_id>`", parse_mode="Markdown")
        return

    user_id_str = parts[1]
    if not user_id_str.isdigit():
        await message.answer("‚ùó –û—à–∏–±–∫–∞: `user_id` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
        return

    user_id = int(user_id_str)

    cur = conn.cursor()

    cur.execute("SELECT first_name, last_name FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
        return

    cur.execute("DELETE FROM weekly_hours WHERE user_id=?", (user_id,))
    cur.execute("DELETE FROM monthly_hours WHERE user_id=?", (user_id,))
    cur.execute("DELETE FROM users WHERE user_id=?", (user_id,))
    conn.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` ({user[0]} {user[1]}) –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", parse_mode="Markdown")

@dp.message(Command("edit_name"))
async def cmd_edit_name(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/edit_name <user_id> <–Ω–æ–≤–æ–µ –∏–º—è>`", parse_mode="Markdown")
        return
    _, uid_str, new_name = parts
    if not uid_str.isdigit():
        await message.reply("–û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    user_id = int(uid_str)
    cur = conn.cursor()
    cur.execute("UPDATE users SET first_name=? WHERE user_id=?", (new_name.strip(), user_id))
    if cur.rowcount == 0:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω.".format(user_id))
    else:
        conn.commit()
        await message.reply("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")

@dp.message(Command("edit_surname"))
async def cmd_edit_surname(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/edit_surname <user_id> <–Ω–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è>`", parse_mode="Markdown")
        return
    _, uid_str, new_surname = parts
    if not uid_str.isdigit():
        await message.reply("–û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    user_id = int(uid_str)
    cur = conn.cursor()
    cur.execute("UPDATE users SET last_name=? WHERE user_id=?", (new_surname.strip(), user_id))
    if cur.rowcount == 0:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        conn.commit()
        await message.reply("–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

@dp.message(Command("remove_user"))
async def cmd_remove_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove_user <user_id>`", parse_mode="Markdown")
        return
    _, uid_str = parts
    if not uid_str.isdigit():
        await message.reply("–û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    user_id = int(uid_str)
    cur = conn.cursor()
    cur.execute("DELETE FROM weekly_hours WHERE user_id=?", (user_id,))
    cur.execute("DELETE FROM monthly_hours WHERE user_id=?", (user_id,))
    cur.execute("DELETE FROM users WHERE user_id=?", (user_id,))
    if cur.rowcount == 0:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        conn.commit()
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")


@dp.message(Command("weekchange"))
async def change_week_hours(message: Message, state: FSMContext):
    user_id = message.from_user.id
    now = datetime.now()
    year, week_num, _ = now.isocalendar()
    cur = conn.cursor()
    cur.execute("""
        SELECT hours FROM weekly_hours 
        WHERE user_id = ? AND year = ? AND week = ?
    """, (user_id, year, week_num))
    existing_data = cur.fetchone()

    if not existing_data:
        await message.answer(f"‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã —á–∞—Å—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ({week_num}-—è –Ω–µ–¥–µ–ª—è {year}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weekh –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    await state.set_state(InputHours.waiting_for_week_hours_edit)
    await state.update_data(target_year=year, target_week=week_num)

    await message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ({week_num}-—è –Ω–µ–¥–µ–ª—è {year} –≥–æ–¥–∞):")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="week", description="–í–≤–µ—Å—Ç–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é"),
        BotCommand(command="weekchange", description="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é"),
        BotCommand(command="month", description="–í–≤–µ—Å—Ç–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü"),
    ]
    await bot.set_my_commands(commands)


@dp.message(InputHours.waiting_for_week_hours)
async def process_week_hours(message: Message, state: FSMContext):
    text = message.text.strip().replace(',', '.')

    try:
        hours = float(text)
    except ValueError:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40).")
        return

    data = await state.get_data()
    year = data.get("target_year")
    week_num = data.get("target_week")
    user_id = message.from_user.id

    cur = conn.cursor()
    cur.execute("""
        INSERT INTO weekly_hours (user_id, year, week, hours) 
        VALUES (?, ?, ?, ?)
    """, (user_id, year, week_num, hours))
    conn.commit()

    await state.clear()
    await message.reply(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {hours} —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ({week_num}-—è –Ω–µ–¥–µ–ª—è {year} –≥–æ–¥–∞).")


@dp.message(InputHours.waiting_for_month_hours)
async def process_month_hours(message: Message, state: FSMContext):
    text = message.text.strip().replace(',', '.')

    try:
        hours = float(text)
    except ValueError:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 160).")
        return

    data = await state.get_data()
    year = data.get("target_year")
    month = data.get("target_month")
    user_id = message.from_user.id

    cur = conn.cursor()
    cur.execute("""
        INSERT INTO monthly_hours (user_id, year, month, hours) 
        VALUES (?, ?, ?, ?)
    """, (user_id, year, month, hours))
    conn.commit()

    await state.clear()
    await message.reply(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {hours} —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({month:02d}.{year}).")

@dp.message(InputHours.waiting_for_week_hours_edit)
async def process_week_hours_edit(message: Message, state: FSMContext):
    text = message.text.strip().replace(',', '.')

    try:
        hours = float(text)
    except ValueError:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40).")
        return

    data = await state.get_data()
    year = data.get("target_year")
    week_num = data.get("target_week")
    user_id = message.from_user.id

    if year is None or week_num is None:
        await message.reply("‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–¥–µ–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    cur = conn.cursor()
    cur.execute("""
        UPDATE weekly_hours 
        SET hours = ? 
        WHERE user_id = ? AND year = ? AND week = ?
    """, (hours, user_id, year, week_num))
    conn.commit()

    await state.clear()
    await message.reply(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {hours} —á–∞—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ({week_num}-—è –Ω–µ–¥–µ–ª—è {year}).")

#–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_weekly_prompt():
    now = datetime.now()
    monday_this_week = now - timedelta(days=now.weekday())
    last_week_monday = monday_this_week - timedelta(days=7)
    year, week_num, _ = last_week_monday.isocalendar()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users")
    users = cur.fetchall()
    for (uid,) in users:
        try:
            await bot.send_message(uid, "‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.")
            state = dp.current_state(chat=uid, user=uid)
            await state.set_state(InputHours.waiting_for_week_hours.state)
            await state.update_data(target_year=year, target_week=week_num)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {uid}: {e}")

async def send_monthly_prompt():
    now = datetime.now()
    year = now.year
    month = now.month
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users")
    users = cur.fetchall()
    for (uid,) in users:
        try:
            await bot.send_message(uid, "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
            state = dp.current_state(chat=uid, user=uid)
            await state.set_state(InputHours.waiting_for_month_hours.state)
            await state.update_data(target_year=year, target_month=month)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {uid}: {e}")


scheduler = AsyncIOScheduler()
scheduler.add_job(send_weekly_prompt, CronTrigger(day_of_week='mon', hour=9, minute=0))
scheduler.add_job(send_monthly_prompt, CronTrigger(day='1', hour=9, minute=0))

async def on_startup(dp):
    scheduler.start()
    logging.info("Scheduler started. Bot is up and running.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await set_bot_commands(bot)
    dp["bot"] = bot
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

